/*
 *  This file is part of rmlint.
 *
 *  rmlint is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  rmlint is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with rmlint.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *
 *  - Christopher <sahib> Pahl 2010-2017 (https://github.com/sahib)
 *  - Daniel <SeeSpotRun> T.   2014-2017 (https://github.com/SeeSpotRun)
 *
 * Hosted on http://github.com/sahib/rmlint
 *
 */

#include "../formats.h"
#include "../preprocess.h"
#include "../utilities.h"

#include <glib.h>
#include <stdio.h>
#include <string.h>

static const char PY_SOURCE[] = "<<PYTHON_SOURCE>>";

typedef struct RmFmtHandlerPy {
    /* must be first */
    RmFmtHandler parent;

    /* HACK: Actual handler might be bigger, add padding. */
    char _dummy[1024];

    /* Filehandle to pass to the JSON Formatter. */
    FILE *json_out;

} RmFmtHandlerPy;

/////////////////////////
//  ACTUAL CALLBACKS   //
/////////////////////////

static void rm_fmt_head(RmSession *session, RmFmtHandler *parent, FILE *out) {
    RmFmtHandlerPy *self = (RmFmtHandlerPy *)parent;

    if(fwrite(PY_SOURCE, 1, sizeof(PY_SOURCE), out) <= 0) {
        rm_log_perror("Failed to write python script");
        return;
    }

    if(fchmod(fileno(out), S_IRUSR | S_IWUSR | S_IXUSR) == -1) {
        rm_log_perror("Could not chmod +x python-script");
    }

    self->json_out = fopen(".rmlint.json", "w");
    if(self->json_out == NULL) {
        return;
    }

    /* Delegate */
    extern RmFmtHandler *JSON_HANDLER;
    JSON_HANDLER->head(session, (RmFmtHandler *)self, self->json_out);
}

static void rm_fmt_foot(RmSession *session, RmFmtHandler *parent, _UNUSED FILE *out) {
    RmFmtHandlerPy *self = (RmFmtHandlerPy *)parent;
    if(self->json_out == NULL) {
        return;
    }

    /* Delegate */
    extern RmFmtHandler *JSON_HANDLER;
    JSON_HANDLER->foot(session, (RmFmtHandler *)self, self->json_out);

    fclose(self->json_out);
}

static void rm_fmt_elem(
    RmSession *session,
    RmFmtHandler *parent,
    _UNUSED FILE *out, RmFile *file
) {
    RmFmtHandlerPy *self = (RmFmtHandlerPy *)parent;
    if(self->json_out == NULL) {
        return;
    }

    /* Delegate */
    extern RmFmtHandler *JSON_HANDLER;
    JSON_HANDLER->elem(session, (RmFmtHandler *)self, self->json_out, file);
}

static RmFmtHandlerPy PY_HANDLER_IMPL = {
    /* Initialize parent */
    .parent = {
        .size = sizeof(PY_HANDLER_IMPL),
        .name = "py",
        .head = rm_fmt_head,
        .elem = rm_fmt_elem,
        .prog = NULL,
        .foot = rm_fmt_foot,
        .valid_keys = {NULL},
    }
};

RmFmtHandler *PY_HANDLER = (RmFmtHandler *)&PY_HANDLER_IMPL;
