#ifndef RM_CONFIG_H
#define RM_CONFIG_H

#define INSTALL_PREFIX "{INSTALL_PREFIX}"

#define HAVE_BLKID         ({HAVE_BLKID})
#define HAVE_LIBINTL       ({HAVE_LIBINTL})
#define HAVE_LIBELF        ({HAVE_LIBELF})
#define HAVE_JSON_GLIB     ({HAVE_JSON_GLIB})
#define HAVE_GIO_UNIX      ({HAVE_GIO_UNIX})
#define HAVE_FIEMAP        ({HAVE_FIEMAP})
#define HAVE_XATTR         ({HAVE_XATTR})
#define HAVE_SHA512        ({HAVE_SHA512})
#define HAVE_BIGFILES      ({HAVE_BIGFILES})
#define HAVE_STAT64        ({HAVE_STAT64})
#define HAVE_BIG_OFF_T     ({HAVE_BIG_OFF_T})
#define HAVE_SYSBLOCK      ({HAVE_SYSBLOCK})
#define HAVE_LINUX_LIMITS  ({HAVE_LINUX_LIMITS})
#define HAVE_POSIX_FADVISE ({HAVE_POSIX_FADVISE})
#define HAVE_BTRFS_H       ({HAVE_BTRFS_H})
#define HAVE_FACCESSAT     ({HAVE_FACCESSAT})
#define HAVE_UNAME         ({HAVE_UNAME})
#define HAVE_SYSMACROS_H   ({HAVE_SYSMACROS_H})

#define RM_DEFAULT_DIGEST       RM_DIGEST_BLAKE2B
#define RM_VERSION              "{VERSION_MAJOR}.{VERSION_MINOR}.{VERSION_PATCH}"
#define RM_VERSION_MAJOR        {VERSION_MAJOR}
#define RM_VERSION_MINOR        {VERSION_MINOR}
#define RM_VERSION_PATCH        {VERSION_PATCH}
#define RM_VERSION_NAME         "{VERSION_NAME}"
#define RM_VERSION_GIT_REVISION "{VERSION_GIT_REVISION}"

#define RM_MANPAGE_USE_PAGER (1)

/* Might come in useful */
#define RM_CHECK_VERSION(X,Y,Z)  (X < RM_VERSION_MAJOR || (   \
        X == RM_VERSION_MAJOR && (Y < RM_VERSION_MINOR || (   \
        Y == RM_VERSION_MINOR && Z <= RM_VERSION_MICRO))))

/* These colors should only be used with the rm_log_* macros below */
#define RED    "\x1b[31;01m"
#define YELLOW "\x1b[33;01m"
#define RESET  "\x1b[0m"
#define GREEN  "\x1b[32;01m"
#define BLUE   "\x1b[34;01m"

#include <errno.h>

#if HAVE_LINUX_LIMITS
#include <linux/limits.h>
#else
# ifndef PATH_MAX
#  define PATH_MAX 4096
# endif
#endif

#define rm_log_debug(...)   g_log("rmlint", G_LOG_LEVEL_DEBUG, __VA_ARGS__)
#define rm_log_info(...)    g_log("rmlint", G_LOG_LEVEL_INFO, __VA_ARGS__)
#define rm_log_warning(...) g_log("rmlint", G_LOG_LEVEL_WARNING, __VA_ARGS__)
#define rm_log_error(...)   g_log("rmlint", G_LOG_LEVEL_CRITICAL, __VA_ARGS__)

#define rm_log_perror(message)                                                           \
    if(errno) {{                                                                         \
        rm_log_error_line("%s:%d: %s: %s", __FILE__, __LINE__, message, g_strerror(errno)); \
    }}                                                                                   \

#define rm_log_perrorf(message, ...)                                    \
    if(errno) {{                                                        \
        int _errsv = errno;                                         \
        char *msg = g_strdup_printf(message, __VA_ARGS__);          \
        rm_log_error_line("%s:%d: %s: %s", __FILE__, __LINE__, msg, \
                          g_strerror(_errsv));                      \
        g_free(msg);                                                \
    }}

#define _UNUSED G_GNUC_UNUSED
#define LLU G_GUINT64_FORMAT
#define LLI G_GINT64_FORMAT


#define RM_PLATFORM_32 (UINTPTR_MAX == 0xffffffff)
#define RM_PLATFORM_64 (UINTPTR_MAX == 0xffffffffffffffff)

#ifdef __APPLE__
# ifdef __MACH__
#  define RM_IS_APPLE 1
# endif
#endif

#ifdef __CYGWIN__
# define RM_IS_CYGWIN 1
#endif

#include <glib.h>

/* Printf formatting for large integers */
#include <inttypes.h>

#define RM_GETTEXT_PACKAGE "rmlint"

#if HAVE_LIBINTL
#  define _(String) gettext (String)
#  define gettext_noop(String) String
#  define N_(String) gettext_noop (String)
#  include <libintl.h>
#else
#  define _(String) (String)
#  define gettext_noop(String) String
#  define N_(String) gettext_noop (String)
#endif


typedef guint64 RmOff;

/* Stupid macros to make printing error lines easier */
#define rm_log_error_prefix() \
    rm_log_error(RED);        \
    rm_log_error(_("ERROR")); \
    rm_log_error(": "RESET);  \

#define rm_log_warning_prefix()   \
    rm_log_warning(YELLOW);       \
    rm_log_warning(_("WARNING")); \
    rm_log_warning(": "RESET);    \

#define rm_log_info_prefix()   \
    rm_log_warning(GREEN);     \
    rm_log_warning(_("INFO")); \
    rm_log_warning(": "RESET); \

#define rm_log_debug_prefix() \
    rm_log_debug(BLUE);       \
    rm_log_debug(_("DEBUG")); \
    rm_log_debug(": "RESET);  \

///////////////

#define rm_log_error_line(...) \
    rm_log_error_prefix()      \
    rm_log_error(__VA_ARGS__); \
    rm_log_error("\n");        \

#define rm_log_warning_line(...) \
    rm_log_warning_prefix()      \
    rm_log_warning(__VA_ARGS__); \
    rm_log_warning("\n");        \

#define rm_log_info_line(...)    \
    rm_log_info_prefix()         \
    rm_log_warning(__VA_ARGS__); \
    rm_log_warning("\n");        \

#define rm_log_debug_line(...) \
    rm_log_debug_prefix()      \
    rm_log_debug(__VA_ARGS__); \
    rm_log_debug("\n");        \

/* Domain for reporting errors. Needed by GOptions */
#define RM_ERROR_QUARK (g_quark_from_static_string("rmlint"))

#define rm_assert_gentle(cond)                                                                \
    if(!(cond)) {{                                                                            \
        rm_log_error_line("BUG: Assertion failed at `%s@%d`: %s", __FILE__, __LINE__, #cond); \
        rm_log_error_line("     Will try to continue in 2 seconds. Expect crashes.");         \
        g_usleep(2 * 1000 * 1000);                                                            \
    }}


#define RM_NOT_REACHED (0)
#define rm_assert_gentle_not_reached() rm_assert_gentle(RM_NOT_REACHED)

#endif
