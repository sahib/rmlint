name: Build and test (linux)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # The test suite is highly disk-intensive. Since linux instances in
      # GitHub have 16G of RAM we'll use that to speed things up.
      RM_TS_DIR: "/tmp/rmlint-unit-testdir"
      RM_TS_RAMSIZE_GB: 12
      RM_TS_VENV: "/tmp/rmlint-venv"
      # Test suite configuration
      # Todo: eventually run tests with valgrind (RM_TS_USE_VALGRIND)
      # Todo enable slow tests in pytest
      RM_TS_PRINT_CMD: "1"
      RM_TS_PEDANTIC: "0"
      RM_TS_USE_VALGRIND: "0"

    strategy:
      matrix:
        distro:
          # Glibc-based
          - tag: "ubuntu:latest"
            preparecmd: |
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt-get install -y --no-install-recommends \
                scons python3-sphinx gettext python3-setuptools \
                libblkid-dev libelf-dev libglib2.0-dev libjson-glib-dev \
                clang python3-pip python3-cffi python3-dev libffi-dev \
                python3-venv
          # Musl based
          - tag: "alpine:latest"
            preparecmd: |
              apk add build-base glib-dev json-glib-dev pkgconf scons
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Check need for testing"
        # TODO also include skipping build but allow docs to be processed
        run: |
          if git diff --exit-code --name-only origin/$GITHUB_BASE_REF...$GITHUB_SHA ':!.gitignore' ':!docs' ':!*.md' ':!*.txt' ':!*.rst'; then
            echo "RUN_TEST=false" | tee -a "${GITHUB_ENV}"
          else
            echo "RUN_TEST=true" | tee -a "${GITHUB_ENV}"
          fi

      - name: "Start container and prepare env file"
        # TODO Ignore linter warning. See https://github.com/github/vscode-github-actions/issues/222
        if: ${{ env.RUN_TEST == 'true' }}
        run: |
          echo "CT_NAME=$(echo "${{ matrix.distro.tag }}" | tr ':' '_')" | tee -a "${GITHUB_ENV}"
          echo "RM_TS_RAMSIZE=$(( RM_TS_RAMSIZE_GB * 2 ** 20 ))" | tee -a "${GITHUB_ENV}"
          source "${GITHUB_ENV}"
          docker run \
            --privileged --detach --tty \
            --env-file <(env) \
            --volume "$PWD:/build" \
            --workdir '/build' \
            --name "${CT_NAME}" \
            "${{ matrix.distro.tag }}"

      - name: "Prepare build environment"
        if: ${{ env.RUN_TEST == 'true' }}
        run: |
          echo "
            ${{ matrix.distro.preparecmd }}
            python3 -m venv "${RM_TS_VENV}"
            . "${RM_TS_VENV}/bin/activate"
            pip3 install -r tests/requirements.txt
            pip3 install -r docs/requirements.txt
          " | docker exec -i "${CT_NAME}" sh

      - name: "Build"
        if: ${{ env.RUN_TEST == 'true' }}
        run: |
          echo "
            . "${RM_TS_VENV}/bin/activate"
            scons config
            scons VERBOSE=1 DEBUG=1 O=release
          " | docker exec -i "${CT_NAME}" sh

      - name: "Run non-CoW tests (tmpfs)"
        if: ${{ env.RUN_TEST == 'true' }}
        run: |
          echo "
            mkdir -p "${RM_TS_DIR}"
            mount -o size=${RM_TS_RAMSIZE},nr_inodes=0 -t tmpfs tmpfs "${RM_TS_DIR}"
            . "${RM_TS_VENV}/bin/activate"
            python3 -m pytest -s -v
            umount "${RM_TS_DIR}"
          " | docker exec -i "${CT_NAME}" sh

      - name: "Run CoW tests (btrfs on blockramdisk)"
        if: ${{ env.RUN_TEST == 'true' }}
        run: |
          echo "
            modprobe brd rd_nr=1 rd_size=${RM_TS_RAMSIZE}
            mkfs.btrfs -f /dev/ram0
            mount /dev/ram0 "${RM_TS_DIR}"
            chmod 0777 "${RM_TS_DIR}"
            cat tests/conftest-cow-only.py.part | tee -a tests/conftest.py
            . "${RM_TS_VENV}/bin/activate"
            python3 -m pytest -s -v
            umount "${RM_TS_DIR}"
            rmmod brd
          " | docker exec -i "${CT_NAME}" sh

      - name: "Cleanup"
        if: ${{ env.RUN_TEST == 'true' }}
        run: docker rm -f "${CT_NAME}"
